package com.victor.presenter;import com.victor.okhttp.library.annotation.HttpParms;import com.victor.okhttp.library.data.Request;import com.victor.okhttp.library.inject.HttpInject;import com.victor.okhttp.library.module.HttpRequest;import com.victor.okhttp.library.presenter.impl.BasePresenterImpl;import com.victor.view.RailwayView;import com.victor.app.App;import java.io.IOException;/* * ----------------------------------------------------------------- * Copyright (C) 2018-2028, by Victor, All rights reserved. * ----------------------------------------------------------------- * File: RailWayPresenterImpl.java * Author: Victor * Date: 2018/9/6 18:25 * Description: * ----------------------------------------------------------------- */public class RailWayPresenterImpl<H,T> extends BasePresenterImpl<H,T> {	/*Presenter作为中间层，持有View和Model的引用*/	private RailwayView railwayView;	private String mClientPriKey;	private String mTrustStorePubKey;	public RailWayPresenterImpl(RailwayView railwayView) {		this.railwayView = railwayView;		mClientPriKey = App.get().getClientPriKey();		mTrustStorePubKey = App.get().getTrustStorePubKey();		HttpRequest.getInstance().setSSLSocketFactory(mClientPriKey,mTrustStorePubKey);	}	@Override	public void onSuccess(T data) {		if (railwayView == null) return;		if (data == null) {			railwayView.OnRailway(null,"no data response");		} else {			railwayView.OnRailway(data,"");		}	}	@Override	public void onError(IOException error) {		if (railwayView == null) return;		railwayView.OnRailway(null,error.getMessage());	}	@Override	public Class getViewCls() {		return RailwayView.class;	}	@Override	public Class getViewImplCls() {		return railwayView.getClass();	}	@Override	public void detachView() {		railwayView = null;	}	@HttpParms(method = Request.POST,			bodyContentType = HttpRequest.mJsonBodyContentType)	@Override	public void sendRequest(String url, H header, T parm) {		HttpInject.inject(this);		super.sendRequest(url,header,parm);	}}